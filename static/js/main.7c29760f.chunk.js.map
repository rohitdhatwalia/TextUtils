{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","hrefo","title","type","id","href","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","protoTypes","PropTypes","string","isRequired","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c29760f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" hrefo=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.aboutText}</a>\r\n\r\n                        </li>\r\n                        \r\n\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n        </nav>\r\n            )\r\n}\r\n\r\n            Navbar.protoTypes = {\r\n                title: PropTypes.string.isRequired,\r\n            aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n// defaultprops----\r\n// Navbar.defaultProps =\r\n// {\r\n//     title:'Set your title',\r\n//     aboutText: 'About text here'\r\n// };","import React, {useState} from \"react\";\r\nexport default function TextForm(props) {\r\n\r\n    const handleupClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"converted to UpperCase\" , \"Success\");\r\n    }\r\n\r\n    const handleloClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"converted to LowerCase\" , \"Success\");\r\n    }\r\n\r\n    const handleclearClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newtext = '';\r\n        setText(newtext);\r\n    }\r\n\r\n    const handlecopy = () =>\r\n    {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied !\" , \"Success\");\r\n    }\r\n\r\n    const handleExtraSpace = () =>\r\n    {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Space Removed\" , \"Success\");\r\n    }\r\n\r\n   \r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"uppercase on changed\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text ,setText] = useState('');\r\n    // setText(\"New text\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n                <textarea\r\n                    className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}}\r\n                    id=\"myBox\" \r\n                    rows=\"8\"\r\n                ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleupClick}>Convert to Upper Case</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleloClick}>Convert to Lower Case</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handlecopy}>copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleclearClick}>clear text</button>\r\n            \r\n            \r\n        </div>\r\n\r\n        <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text Summary.</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            \r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //darkmode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message , type)=>{\n    setAlert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n\n    \n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - DarkMode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing website ';\n      // }, 3000);\n      // setInterval(() => {\n      //   document.title = 'Install Now ';\n      // }, 2000);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - LightMode';\n    }\n  }\n\n  return (\n    // JSX (html+Js) ...classnameclassname , for = HtmlFor\n    // js fregment ( <>...</> )-- for return multiple elements\n    <> \n    {/* <Router> */}\n      {/* <Navbar  title = \"TextUtils\" aboutText = \"About\" /> */}\n      <Navbar  title = \"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      {/* <Navbar/> */}\n      <Alert alert = {alert}/>\n      <div className =\"container my-3\">\n\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n           */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n\n        \n\n         {/* <About/> */}\n      </div>\n      {/* </Router>  */}\n    </>\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}