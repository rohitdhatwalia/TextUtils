{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","newText","split","join","filter","element","protoTypes","PropTypes","string","isRequired","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.be039c68.chunk.js","sourcesContent":["// import React , {useState} from 'react'\r\n\r\n// export default function About() {\r\n\r\n//     const [myStyle ,setMyStyle] = useState(\r\n//     {\r\n//         color : 'black',\r\n//         backgroundColor : 'white'\r\n//     })\r\n    \r\n\r\n//     const [btntext ,setbtnText] = useState(\"Enabled Dark Mode\")\r\n        \r\n\r\n//    const toggleStyle= ()=>\r\n//     {\r\n//         if(myStyle.color === 'black')\r\n//         {\r\n//             setMyStyle({\r\n//                 color : 'white',\r\n//                 backgroundColor : 'black',\r\n//                 border : '1px solid white'\r\n//             })\r\n//             setbtnText(\"Enabled light Mode\")\r\n//         }\r\n//         else{\r\n//             setMyStyle(\r\n//                 {\r\n//                     color : 'black',\r\n//                     backgroundColor : 'white'\r\n//                 }\r\n//             )\r\n//             setbtnText(\"Enabled Dark Mode\")\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n//     return (\r\n//         <div className=\"container\" style={myStyle}>\r\n            \r\n//             <h2 className = \"my-3\">About us</h2>\r\n//             <div className=\"accordion\" id=\"accordionExample\" >\r\n//                 <div className=\"accordion-item\">\r\n//                     <h2 className=\"accordion-header\" id=\"headingOne\">\r\n//                         <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n//                             Accordion Item #1\r\n//                         </button>\r\n//                     </h2>\r\n//                     <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n//                         <div className=\"accordion-body\" style={myStyle}>\r\n//                             <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"accordion-item\" style={myStyle}>\r\n//                     <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n//                         <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n//                             Accordion Item #2\r\n//                         </button>\r\n//                     </h2>\r\n//                     <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n//                         <div className=\"accordion-body\" style={myStyle}>\r\n//                             <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"accordion-item\">\r\n//                     <h2 className=\"accordion-header\" id=\"headingThree\">\r\n//                         <button className=\"accordion-button collapsed\"  type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n//                             Accordion Item #3\r\n//                         </button>\r\n//                     </h2>\r\n//                     <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n//                         <div className=\"accordion-body\" style={myStyle}>\r\n//                             <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n           \r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\nimport React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // }) \r\n    let myStyle = {\r\n        color: props.mode ==='dark'?'white':'#042743',\r\n        backgroundColor: props.mode ==='dark'?'rgb(36 74 104)':'white', \r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}}>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <strong>Analyze Your text </strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or \r\n\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    <strong>Free to use </strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browser Compatible </strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.aboutText}</Link>\r\n\r\n                        </li>\r\n                        \r\n\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n        </nav>\r\n            )\r\n}\r\n\r\n            Navbar.protoTypes = {\r\n                title: PropTypes.string.isRequired,\r\n            aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n// defaultprops----\r\n// Navbar.defaultProps =\r\n// {\r\n//     title:'Set your title',\r\n//     aboutText: 'About text here'\r\n// };","import React, {useState} from \"react\";\r\nexport default function TextForm(props) {\r\n\r\n    const handleupClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"converted to UpperCase\" , \"Success\");\r\n    }\r\n\r\n    const handleloClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"converted to LowerCase\" , \"Success\");\r\n    }\r\n\r\n    const handleclearClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newtext = '';\r\n        setText(newtext);\r\n    }\r\n\r\n    const handlecopy = () =>\r\n    {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text Copied !\" , \"Success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpace = () =>\r\n    {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Space Removed\" , \"Success\");\r\n    }\r\n\r\n   \r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"uppercase on changed\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text ,setText] = useState('');\r\n    // setText(\"New text\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea\r\n                    className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}}\r\n                    id=\"myBox\" \r\n                    rows=\"8\"\r\n                ></textarea>\r\n            </div>\r\n            <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handleupClick}>Convert to Upper Case</button>\r\n            <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handleloClick}>Convert to Lower Case</button>\r\n            <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handlecopy}>copy text</button>\r\n            <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n            <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handleclearClick}>clear text</button>\r\n            \r\n            \r\n        </div>\r\n\r\n        <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text Summary.</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  \n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //darkmode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message , type)=>{\n    setAlert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n\n    \n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - DarkMode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing website ';\n      // }, 3000);\n      // setInterval(() => {\n      //   document.title = 'Install Now ';\n      // }, 2000);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - LightMode';\n    }\n  }\n\n  return (\n    // JSX (html+Js) ...classnameclassname , for = HtmlFor\n    // js fregment ( <>...</> )-- for return multiple elements\n    <> \n    <Router>\n      {/* <Navbar  title = \"TextUtils\" aboutText = \"About\" /> */}\n      <Navbar  title = \"TextUtils\" mode={mode} toggleMode={toggleMode}  aboutText = \"About\"/>\n      {/* <Navbar/> */}\n      <Alert alert = {alert}/>\n      <div className =\"container my-3\">\n\n      <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          \n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\n          </Route>\n        </Switch>\n\n        \n\n         {/* <About/> */}\n      </div>\n      </Router> \n    </>\n\n    \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}